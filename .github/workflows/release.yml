# This workflow handles releases for VaultEnv CLI
# It triggers on version tags and creates GitHub releases with built artifacts

name: Release

# Trigger on version tags (including beta tags like v0.1.0-beta.1)
on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*-beta.*"
      - "v*.*.*-rc.*"
      - "v*.*.*-alpha.*"

# Permissions needed for creating releases and uploading artifacts
permissions:
  contents: write # Create releases and upload assets
  packages: write # Upload to GitHub packages (if using Docker)
  attestations: write # Sign artifacts (for supply chain security)
  id-token: write # OIDC token for signing

jobs:
  # Main release job using GoReleaser
  goreleaser:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      # Check out code with full history for changelog generation
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history needed for changelog generation

      # Verify that we're on a tag (for debugging)
      - name: Verify Tag
        run: |
          echo "Building tag: ${{ github.ref_name }}"
          git describe --tags --exact-match

      # Configure git for GoReleaser (needed for some operations)
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      # Set up Go environment using version from go.mod
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true # Cache dependencies for faster builds

      # Display Go version for debugging
      - name: Display Go version
        run: go version

      # Run tests before release to ensure quality
      - name: Run Tests
        run: |
          echo "Running tests..."
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
          echo "Tests completed successfully!"

      # Run linting (optional but recommended)
      - name: Run Linting
        run: |
          # Install golangci-lint if you want linting
          # curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s latest
          # ./bin/golangci-lint run --timeout=5m
          echo "Skipping linting for now..."

      # Create necessary directories that might be referenced in .goreleaser.yml
      - name: Prepare Release Structure
        run: |
          # Create directories if they don't exist
          mkdir -p completions docs examples

          # Create placeholder files if needed
          touch CHANGELOG.md || true

          # Create a simple example if the directory is empty
          if [ ! "$(ls -A examples)" ]; then
            echo "# VaultEnv CLI Example" > examples/README.md
            echo "Example usage documentation will be added here." >> examples/README.md
          fi

          # Create basic docs if the directory is empty
          if [ ! "$(ls -A docs)" ]; then
            echo "# VaultEnv CLI Documentation" > docs/README.md
            echo "Full documentation will be available at https://docs.vaultenv.io" >> docs/README.md
          fi

      # Run GoReleaser
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2" # Use latest v2.x version
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Add these if you need them in the future:
          # HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
          # DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          # TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}

      # Upload artifacts for debugging or additional distribution
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        if: always() # Upload even if release partially fails
        with:
          name: release-artifacts-${{ github.ref_name }}
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.deb
            dist/*.rpm
            dist/checksums.txt
            dist/*.json
            dist/**/*.sbom
          retention-days: 30
          compression-level: 9 # Maximum compression

      # Upload test coverage report
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ github.ref_name }}
          path: |
            coverage.out
            coverage.html
          retention-days: 30

      # Display release summary
      - name: Display Release Summary
        if: success()
        run: |
          echo "üéâ Release ${{ github.ref_name }} completed successfully!"
          echo ""
          echo "üì¶ Release artifacts:"
          ls -la dist/ | grep -E "\.(tar\.gz|zip|deb|rpm)$" || true
          echo ""
          echo "üìù Checksums:"
          cat dist/checksums.txt || true
          echo ""
          echo "üîó View the release at: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"

  # Optional: Build and push Docker images
  # Uncomment this job if you want to build Docker images
  # docker:
  #   name: Build Docker Images
  #   runs-on: ubuntu-latest
  #   needs: goreleaser  # Only run after goreleaser succeeds
  #   if: success() && startsWith(github.ref, 'refs/tags/')
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Extract metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: |
  #           ghcr.io/${{ github.repository }}
  #         tags: |
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=raw,value=beta,enable={{contains(github.ref, 'beta')}}

  #     - name: Log in to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         platforms: linux/amd64,linux/arm64
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  # Notify about the release (optional)
  # notify:
  #   name: Notify Release
  #   runs-on: ubuntu-latest
  #   needs: [goreleaser]
  #   if: success()
  #   steps:
  #     - name: Send Discord Notification
  #       if: env.DISCORD_WEBHOOK_URL != ''
  #       env:
  #         DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
  #       run: |
  #         curl -H "Content-Type: application/json" \
  #           -d "{\"content\": \"üöÄ VaultEnv CLI ${{ github.ref_name }} has been released! Check it out at https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}\"}" \
  #           $DISCORD_WEBHOOK_URL
