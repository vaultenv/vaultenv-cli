# GoReleaser configuration for VaultEnv CLI Beta Release
# This configuration is optimized for open source beta releases with
# comprehensive platform support and clear beta messaging

version: 2

# Project name used in release artifacts
project_name: vaultenv-cli

# Run these commands before building
before:
  hooks:
    # Ensure dependencies are up to date
    - go mod tidy
    - go mod download

    # Generate any code if needed
    - go generate ./...

    # Run tests to ensure quality
    - go test -short ./...

    # Create a VERSION file for the build
    - echo "{{ .Version }}" > VERSION

    # Create installation script for Unix-like systems
    # This script is created here because GoReleaser v2 doesn't support archive hooks
    - |
      cat > install.sh << 'EOF'
      #!/bin/sh
      set -e

      # VaultEnv CLI Installation Script
      VERSION="{{ .Version }}"
      BINARY_NAME="vaultenv-cli"
      INSTALL_DIR="/usr/local/bin"

      echo "Installing VaultEnv CLI ${VERSION} (Beta)..."
      echo ""

      # Check if running as root for system-wide installation
      if [ "$EUID" -ne 0 ] && [ "$USER" != "root" ]; then 
          echo "Note: Running without sudo. Installing to user's local bin directory."
          INSTALL_DIR="$HOME/.local/bin"
          mkdir -p "$INSTALL_DIR"
          
          # Check if local bin is in PATH
          if ! echo "$PATH" | grep -q "$HOME/.local/bin"; then
              echo "Warning: $HOME/.local/bin is not in your PATH"
              echo "You may need to add it by running:"
              echo "  export PATH=\"\$PATH:\$HOME/.local/bin\""
              echo ""
          fi
      fi

      # Check if binary exists in current directory
      if [ ! -f "./$BINARY_NAME" ]; then
          echo "Error: $BINARY_NAME not found in current directory"
          echo "Please run this script from the directory containing the binary"
          exit 1
      fi

      # Check if old version exists
      if command -v "$BINARY_NAME" >/dev/null 2>&1; then
          OLD_VERSION=$("$BINARY_NAME" --version 2>/dev/null || echo "unknown")
          echo "Found existing installation: $OLD_VERSION"
          echo "Upgrading to $VERSION..."
      fi

      # Install the binary
      echo "Installing to: $INSTALL_DIR/$BINARY_NAME"
      install -m 755 "$BINARY_NAME" "$INSTALL_DIR/" || {
          echo "Error: Installation failed"
          echo "You may need to run: sudo $0"
          exit 1
      }

      # Verify installation
      if command -v "$BINARY_NAME" >/dev/null 2>&1; then
          INSTALLED_VERSION=$("$BINARY_NAME" --version 2>/dev/null || echo "unknown")
          echo ""
          echo "✅ Installation complete!"
          echo "📍 Location: $(which "$BINARY_NAME")"
          echo "📦 Version: $INSTALLED_VERSION"
          echo ""
          echo "Run 'vaultenv-cli --help' to get started"
      else
          echo ""
          echo "⚠️  Installation complete, but $BINARY_NAME not found in PATH"
          echo "   Add $INSTALL_DIR to your PATH:"
          echo "   export PATH=\"\$PATH:$INSTALL_DIR\""
      fi
      EOF

    # Make the installation script executable
    - chmod +x install.sh

# Build configuration
builds:
  - id: vaultenv-cli
    main: ./cmd/vaultenv-cli
    binary: vaultenv-cli

    # Build flags for optimization and metadata
    flags:
      - -trimpath # Remove file paths from binary for reproducible builds

    # Disable CGO for better portability
    env:
      - CGO_ENABLED=0

    # Target platforms - comprehensive coverage for beta testing
    goos:
      - linux
      - darwin
      - windows
      - freebsd
      - openbsd

    goarch:
      - amd64
      - arm64
      - arm
      - "386"

    # ARM variants for specific devices
    goarm:
      - "6" # Raspberry Pi 1
      - "7" # Raspberry Pi 2+

    # Skip unsupported combinations
    ignore:
      - goos: darwin
        goarch: "386"
      - goos: darwin
        goarch: arm
      - goos: windows
        goarch: arm64
      - goos: windows
        goarch: arm
      - goos: freebsd
        goarch: arm
      - goos: openbsd
        goarch: arm

    # Inject version information at build time
    ldflags:
      - -s -w # Strip debug info for smaller binaries
      - -X main.version={{.Version}}
      - -X main.commit={{.FullCommit}}
      - -X main.buildTime={{.Date}}
      - -X main.builtBy=goreleaser
      - -X main.gitBranch={{.Branch}}
      - -X main.gitState={{.IsGitDirty}}

    # Use commit timestamp for reproducible builds
    mod_timestamp: "{{ .CommitTimestamp }}"

    # Add build tags for beta features
    tags:
      - beta
      - netgo # Use pure Go networking
      - osusergo # Use pure Go user functions

# Archive configuration
archives:
  - id: vaultenv-cli
    builds:
      - vaultenv-cli

    # Archive format per platform
    format: tar.gz
    format_overrides:
      - goos: windows
        format: zip

    # Naming template for archives
    name_template: >-
      {{ .ProjectName }}_
      {{- .Version }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else if eq .Arch "arm64" }}aarch64
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}

    # Files to include in the archive
    files:
      # Core files
      - LICENSE
      - README.md
      - CHANGELOG.md

      # Documentation (if these directories exist)
      - src: docs
        dst: docs
        strip_parent: true
        exclude:
          - "**/.DS_Store"

      # Examples (if directory exists)
      - src: examples
        dst: examples
        strip_parent: true
        exclude:
          - "**/.DS_Store"

      # Shell completions (if directory exists)
      - src: completions
        dst: completions
        strip_parent: true

      # Version file
      - src: VERSION
        dst: VERSION

      # Installation script (only for Unix-like systems)
      - src: install.sh
        dst: install.sh
        info:
          mode: 0755 # Ensure it remains executable
        filter:
          goos: [linux, darwin, freebsd, openbsd] # Only include for Unix-like systems

# Create checksums for all artifacts
checksum:
  name_template: "checksums.txt"
  algorithm: sha256

# Snapshot naming for development builds
snapshot:
  name_template: "{{ incpatch .Version }}-dev-{{ .ShortCommit }}"

# Changelog generation
changelog:
  use: github # Use GitHub PR/issue information
  sort: asc
  abbrev: 7 # Short commit hash length

  # Group commits by type
  groups:
    - title: "🚀 Features"
      regexp: '^.*feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: "🐛 Bug Fixes"
      regexp: '^.*fix(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: "🔐 Security"
      regexp: '^.*security(\([[:word:]]+\))??!?:.+$'
      order: 2
    - title: "⚡ Performance"
      regexp: '^.*perf(\([[:word:]]+\))??!?:.+$'
      order: 3
    - title: "📚 Documentation"
      regexp: '^.*docs(\([[:word:]]+\))??!?:.+$'
      order: 4
    - title: "🧪 Testing"
      regexp: '^.*test(\([[:word:]]+\))??!?:.+$'
      order: 5
    - title: "🔧 Other Changes"
      order: 999

  filters:
    # Exclude certain commits from changelog
    exclude:
      - '^chore(\([[:word:]]+\))??:.+$'
      - '^ci(\([[:word:]]+\))??:.+$'
      - '^refactor(\([[:word:]]+\))??:.+$'
      - '^style(\([[:word:]]+\))??:.+$'
      - "^Merge pull request"
      - "^Merge branch"

# GitHub Release configuration
release:
  github:
    owner: vaultenv
    name: vaultenv-cli

  # Mark as prerelease for beta versions
  prerelease: auto

  # Don't create draft releases
  draft: false

  # Release name template
  name_template: "VaultEnv CLI {{ .Version }}"

  # Custom header for beta releases
  header: |
    ## 🚀 VaultEnv CLI {{ .Version }} - Beta Release

    > ⚠️ **Beta Software Notice**: This is a beta release intended for early adopters and testing. 
    > While we've tested it thoroughly, you may encounter bugs. Please report any issues!

    ### ✨ What's New

    {{ .Changelog }}

    ### 📦 Installation

    #### Quick Install (Linux/macOS)
    ```bash
    curl -sSL https://install.vaultenv.io/beta | bash
    ```

    #### Manual Download
    1. Download the appropriate archive for your platform below
    2. Extract the archive: `tar -xzf vaultenv-cli_*.tar.gz`
    3. Run the installation script: `./install.sh`
    4. Or manually copy the binary: `sudo cp vaultenv-cli /usr/local/bin/`

    #### Verify Installation
    ```bash
    vaultenv-cli --version
    ```

    ### 🧪 Beta Testing Focus Areas

    We'd especially appreciate feedback on:
    - Cross-platform compatibility
    - Performance with large numbers of variables
    - Error messages and developer experience
    - Integration with your existing tools

  # Footer with helpful links
  footer: |
    ---

    ### 📚 Resources

    - 📖 [Getting Started Guide](https://docs.vaultenv.io/getting-started)
    - 🐛 [Report Issues](https://github.com/vaultenv/vaultenv-cli/issues/new?labels=bug,beta&template=beta_bug_report.md)
    - 💬 [Beta Feedback Discussion](https://github.com/vaultenv/vaultenv-cli/discussions/categories/beta-feedback)
    - 🔐 [Security Policy](https://github.com/vaultenv/vaultenv-cli/security/policy)

    ### 🙏 Thank You, Beta Testers!

    Your feedback is invaluable in making VaultEnv CLI better. Join our [Discord](https://discord.gg/vaultenv) 
    to connect with other beta testers and the development team.

    **Full Changelog**: https://github.com/vaultenv/vaultenv-cli/compare/{{ .PreviousTag }}...{{ .Tag }}

# Linux packages for easier installation
nfpms:
  - id: vaultenv-cli
    package_name: vaultenv-cli-beta # Beta suffix for package name
    builds:
      - vaultenv-cli

    vendor: VaultEnv
    homepage: https://vaultenv.io
    maintainer: VaultEnv Team <support@vaultenv.io>
    description: |
      Secure environment variable management for modern teams (Beta).
      This is a beta release - please report issues at github.com/vaultenv/vaultenv-cli
    license: MIT
    # Package formats
    formats:
      - deb
      - rpm
      - apk
      - archlinux

    # Version metadata
    version_metadata: beta

    # Dependencies
    dependencies:
      - ca-certificates

    # Recommended packages
    recommends:
      - git

    # Package contents
    contents:
      # Binary
      - src: ./vaultenv-cli
        dst: /usr/bin/vaultenv-cli
        type: file
        file_info:
          mode: 0755

      # Documentation
      - src: ./LICENSE
        dst: /usr/share/doc/vaultenv-cli-beta/LICENSE
        type: file

      - src: ./README.md
        dst: /usr/share/doc/vaultenv-cli-beta/README.md
        type: file

      - src: ./CHANGELOG.md
        dst: /usr/share/doc/vaultenv-cli-beta/CHANGELOG.md
        type: file

      # Create directories for completions if they don't exist
      - dst: /usr/share/bash-completion/completions
        type: dir

      - dst: /usr/share/zsh/site-functions
        type: dir

      - dst: /usr/share/fish/vendor_completions.d
        type: dir

    # Post-install script
    scripts:
      postinstall: |
        #!/bin/sh
        echo "✅ VaultEnv CLI Beta installed successfully!"
        echo "⚠️  This is beta software - please report issues at:"
        echo "   https://github.com/vaultenv/vaultenv-cli/issues"
        echo ""
        echo "Run 'vaultenv-cli --help' to get started"

        # Generate shell completions if the binary supports it
        if command -v vaultenv-cli >/dev/null 2>&1; then
            # Try to generate completions (ignore errors if not supported)
            vaultenv-cli completion bash > /usr/share/bash-completion/completions/vaultenv-cli 2>/dev/null || true
            vaultenv-cli completion zsh > /usr/share/zsh/site-functions/_vaultenv-cli 2>/dev/null || true
            vaultenv-cli completion fish > /usr/share/fish/vendor_completions.d/vaultenv-cli.fish 2>/dev/null || true
        fi

# Create a source tarball
source:
  enabled: true
  name_template: "{{ .ProjectName }}_{{ .Version }}_source"
  format: tar.gz

# Create Software Bill of Materials (SBOM)
sboms:
  - artifacts: archive
    args: ["$artifact", "--output", "cyclonedx-json@1.5=$document"]
